var tipuesearch = {"pages": [{'title': 'W1', 'text': '兩人一組做報告W2~W4完成並交付 \n 用LEO做BLOG \n 將author修改成自己的名字 \n \n 傳送位置改成自己的cd2021並新增disqus論壇 \n \n blog內容撰寫處 \n \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '將圖檔放置coppeliasim編輯並測試 \n 圖檔初草圖 \n \n \n 改造後各別零件 \n \n \n \n \n \n \n \n \n \n \n 圖檔2.0影片 \n \n \n \n \n coppeliasim測試圖 \n \n \n 測試影片 \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '測試1 \n 第一次測試coppeliasim \n stl檔 \n \n 測試二 \n coppeliasim第二次測試 \n 第二次測試stl \n \n 測試三 \n 第三次測試coppeliasim \n 第三次測試stl \n \n \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': 'stage1報告: https://40823123.github.io/stage1-ag19/reveal/index.html#/ \xa0 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '由兩人一組變成四人一組並討論題目 \n', 'tags': '', 'url': 'W5.html'}, {'title': '分組組員', 'text': '40823116\xa0 |\xa0Repository:\xa0 40823116 \xa0 | Site: \xa0 40823116 \n 40823123\xa0 |\xa0Repository:\xa0 40823123 \xa0 | Site: \xa0 40823123 \n 40823131\xa0 |\xa0 Repository:\xa0 40823131 \xa0 | Site: \xa0 40823131 \n 40823136\xa0 |\xa0 Repository:\xa0 40823136 \xa0 | Site: \xa0 40823136 \n', 'tags': '', 'url': '分組組員.html'}, {'title': 'W6', 'text': '用heroku \n https://stage2-ag11.herokuapp.com/content/index.html \xa0 \n 1.從\xa0 http://a.kmol.info:88/heroku.7z \xa0下載 Heroku CLI， 解開壓縮至隨身碟Y槽。 \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '', 'tags': '', 'url': 'W7.html'}, {'title': '小組分工', 'text': '40823116:繪製運輸小車 、pdf製作 。 \n 40823123:coppeliasim模擬、可用資料查找及整合 、reveal製作 。 \n 40823131:運輸小車程式編寫、修改 運輸小車 、coppeliasim模擬調整、網頁協同、構思。 \n 40823136:機械手臂程式編寫、 coppeliasim模擬調整、可用資料查找及整合、構思 。 \n', 'tags': '', 'url': '小組分工.html'}, {'title': '運輸小車繪製', 'text': '因為此次專案只有小車需繪製，所以仍採用Inventor(2018)進行繪製。 \n stl檔: https://drive.google.com/file/d/1HULgTeENzh3tGrNMneSqoOs3D_XNICU-/view?usp=sharing \xa0 \n ipt檔: https://drive.google.com/file/d/11L6R_NlkVavxR1QjsBnwVqe7aqBPAduU/view?usp=sharing \xa0 \n', 'tags': '', 'url': '運輸小車繪製.html'}, {'title': '倉庫繪製', 'text': '將運輸物儲存至此地已達到整體循環 \n STL: 倉庫STL檔 \n SOLIDWORKS: 倉庫圖檔 \n', 'tags': '', 'url': '倉庫繪製.html'}, {'title': 'W8', 'text': '', 'tags': '', 'url': 'W8.html'}, {'title': '程式控制運輸小車', 'text': '利用控制各輪軸的速度，以達到控制車體前進後退及轉向。 \n \n', 'tags': '', 'url': '程式控制運輸小車.html'}, {'title': '程式控制真空機械手臂', 'text': '利用CoppeliaSim內建的機械手臂修改裏頭的程式 \n \n \n', 'tags': '', 'url': '程式控制真空機械手臂.html'}, {'title': 'W9', 'text': 'stage2-ag11最終版 \n \n \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'task1', 'text': '\n \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '\n \n \n \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'W11', 'text': '每組抽2人進行課程直播講解 \n 第十一週直播 \n 主題:reveal API 程式說明(半完成) \n \n \n \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': '第十二週直播 \n 主題: TASK1程式講解與直播軟體串流設定攝像頭設定疑難排解 \n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '直播小組討論stage3和機械手臂程式 \n \n \n \n 78行要對應我的ip \n roboDK裡選工具>選項>其他>點選api服務器ip，將此行ip複製到RDK = Robolink(robodk_path="改成你資料夾內到RoboDK.exe的位址", robodk_ip)，之後按go \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '優化機械手臂程式 \n', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '\n', 'tags': '', 'url': 'W15.html'}, {'title': 'forward kinematics 正向運動學', 'text': "\n x,y with respect to the world coordinate frame. \n x和y為y座標框架 \n the problem here is that given x and y,we want to determine the joined angles,q1and q2 \n 以x為基準到a1一個角度q1,以a1為基準到a2一個角度q2 \n The solution that we're going to follow in this particular section is a geometric. \n 解決部分幾何 \n 一 \n 利用畢氏定理(pythagoras theorem)畢達哥拉斯定理 \n 我們可以知道原點到e點的距離為r \n \n 利用餘弦公式( 所有邊都標記為A, B, C，角都標記為a, b, c\xa0 ) \n A*A=B*B+C*C-2BCcosa \n r*r=a1*a1+a2*a2-2a1a2cos(alpha) \n 經過移項 \n \n 180-q2=alpha \n cosq2=-cos(alpha) \n 把餘弦公式套用到q2的三角形 \n 我們知道q2所以鄰邊為a2cosq2對邊為a2sinq2 \n 可以用q2角寫出正弦關係 \n 現在把原點連到E點畫出的角度為BETA,邊常用藍色表示 \n 藍色底邊為a1+a2cosq2 \n 回到之前化的紅色三角形我們可以建立出q1和beta的關係 \n 設q1+beta=gamma \n 總結 \n 我們有q2餘弦方程式和q1方程式 \n 餘弦函數在0對稱 \n 所以我們知道cosq2的值可能為正或負 \n 我們選擇正角才可以寫出這式子 \n 現在我們來用逆向運動學來處理雙連桿機構 \n", 'tags': '', 'url': 'forward kinematics 正向運動學.html'}, {'title': 'inverse kinematic\xa0逆向運動學', 'text': '我們有兩個連接角 q1 和 q2 的表達式，根據末端執行器姿勢 x 和 y 以及一系列常量 \n 你會發現這兩方程式不是獨立的,q1方程式取決於q2的解 \n 在這狀況下,q2為負, 我們將在q2反餘弦的解前面加上負號 \n 我們需求解q1，因此采用這個特定的三角形，之前求解的角度β以及根據y和x定義的角度ɣ \n q1,beta,gamma和之前求的不同因為涉及到符號變化 \n 然後我們可以替代之前所有等式,以求得此q1方程式 \n 同樣這裡符號發生變化 \n 原本是負號 \n 這是雙連桿機構在此逆向運動學的總形式，其中q2為負 \n 讓我們比較兩個解決方案，q2為正和q2為負的情況 \n \n \n 在這裡，我們有與剛剛看到的相同的兩連桿機器人，但這次我們將使用分析方法來解決它，即我們將更多地依賴代數，特別是線性代數而不是幾何 \n 我們有一個表達式 E，它是表示機械手臂最終位置的齊次變換式，我們在上一課中看到了這一點，我們可以將最終位置寫為一系列基本齊次變換式 \n Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移 \n 如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置 \n 現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來 \n 所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式 \n 現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2 \n 我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2 \n 看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案 \n 所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於 theta \n 這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式 \n 因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式 \n 與上一節中遵循幾何方法求出的表達式一模一樣 \n', 'tags': '', 'url': 'inverse kinematic\xa0逆向運動學.html'}, {'title': 'W16', 'text': '一.onshape零組件繪製 \n 圖檔與stl \n \n 二. \n 建立 CoppeliaSim 4.1.0 MTB robot 場景 \n 剛開始的圖檔只是空殼,需要再添增內部形狀編輯程式(toggle shape)編輯完接下來不管任何皮都可以套用 \n lua執行 \n \n 軸如果有跑出驚嘆號可以先把軸改成被動模式,因為我的圖只有3個軸(沒有吸盤的旋轉軸),有那個也沒用所以沒有新增,但是lua程式要做修改 \n \n 三.加入components-gripper-suction pad 吸盤 場景檔&程式檔 \n function sysCall_init() \n    axis1=sim.getObjectHandle(\'MTB_axis1\')\n    axis2=sim.getObjectHandle(\'MTB_axis2\')\n    axis3=sim.getObjectHandle(\'MTB_axis3\')\n    mtb3=sim.getObjectHandle(\'MTB_3\')\n    suctionPad=sim.getObjectHandle(\'suctionPad\')\n    BaseFrame=sim.getObjectHandle("BaseFrame")\n    block =sim.getObjectHandle("Cuboid")\n    rotation1 = 0\n    distance3 = 0\n    deg = math.pi/180\nend\nfunction sysCall_actuation() \n    -- 吸盤往下降時, 直接貼在方塊頂部的校正值, 單位 m\n    -- 向下較正值為 4.2 mm\n    calibration = 0.0042\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'使用者按下 key:\'..key)\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==112) then --p activate the suction pad\n                    -- if key p pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if p\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==114) then --r right turn in degree\n                    -- if key r pressed axis1 angle adds 5 degrees\n                     rotation1 = rotation1 + 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if r\n                if (auxiliaryData[1]==108) then --l left turn in degree\n                    -- if key l pressed axis1 angle substract 5 degrees\n                     rotation1 = rotation1 - 5*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if l\n                if (auxiliaryData[1]==117) then --d suction pad down\n                    -- if key d pressed axis3 will down 0.01 m plus calibration\n                     distance3 = distance3 + 0.01 + calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if d\n                if (auxiliaryData[1]==100) then --u suction pad up\n                    -- if key u pressed axis3 will up 0.01 m minus calibration\n                    -- 吸盤往下升 1 公分加上校正值\n                     distance3 = distance3 - 0.01 - calibration\n                     sim.setJointPosition(axis3, distance3)\n                end -- if u\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    sim.addStatusbarMessage("方塊目前座標為:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \n--[[\n    -- Read Proximity sensor (0= nothing detected, 1 = object detected)\n    local res = sim.readProximitySensor(proximity)\n    -- Check if possible to insert an new box\n    if (sim.getSimulationTime()-T_last_inserted > T_insert) and not hasStopped then\n        insertBox()\n    end\n    -- If proximity sensor detects an object, stop the belt, stop inserting objects\n    if res == 1 and not hasStopped then\n        if boolList[1] then\n            sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",0)\n            deltaTime = sim.getSimulationTime()-T_last_inserted\n            hasStopped = true\n        else\n            local box = table.remove(boxList,1)\n            local boxDummy = table.remove(boxDummyList,1)\n            table.remove(boolList,1)\n            sim.removeObject(box)\n            sim.removeObject(boxDummy)\n        end\n    end\n    -- If proximity sensor detects nothing and belt has stopped, start belt, continue inserting\n    if res == 0 and hasStopped then\n        sim.setScriptSimulationParameter(sim.handle_self,"conveyorBeltVelocity",beltSpeed)\n        hasStopped = false\n        T_last_inserted = sim.getSimulationTime()-deltaTime\n    end\n    \n]]--\nend\nfunction sysCall_cleanup() \nend \n-- Convert a lua table into a lua syntactically correct string\nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\n\n\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n \n \n \n p:吸盤吸取\xa0 Q:吸盤取消 \n R:逆時鐘轉\xa0 L:順時鐘轉 \n D:伸下去吸\xa0 U:伸上去 \n \n 四.逆向運動學函式 \n skr.lua \xa0\xa0 coppeliasim \n \n \n (0.2, 0.7, 0.05) \n \n (-0.3, -0.55, 0.05) \n \n 五. \n \n \n', 'tags': '', 'url': 'W16.html'}]};